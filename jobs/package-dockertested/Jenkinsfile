def latestVersion(rpm, repo) {
    sh "sudo yum --disablerepo='*' --enablerepo='${repo}' makecache"
    sh(script: "sudo yum --disablerepo='*' --enablerepo='${repo}' --quiet list upgrades '${rpm}' | tail -n 1 | awk '{ print \$2 }'", returnStdout: true).trim()
}
def installedNVR(rpm) {
    sh(script: "ssh -F ${ssh_config} openshiftdevel 'rpm --query ${rpm} --queryformat %{NAME}-%{VERSION}-%{RELEASE}'", returnStdout: true).trim()
}
node('buildvm-devops') {
	properties ([[
		$class: 'ParametersDefinitionProperty',
		parameterDefinitions: [[
			$class: 'BooleanParameterDefinition',
			defaultValue: false,
			description: 'Destroy the previous <code>virtualenv</code> and install the <code>origin-ci-tool</code> from scratch.',
			name: 'CLEAN_INSTALL'
		]]
	],[
		$class: 'PipelineTriggersJobProperty',
		triggers: [[
			$class: 'TimerTrigger',
			spec: 'H H/3 * * *'
		]]
	],[
		$class: 'DisableConcurrentBuildsJobProperty',
	]])
	// https://issues.jenkins-ci.org/browse/JENKINS-33511
	env.WORKSPACE = pwd()
	stage ('Check to see if we need to run') {
	    next_docker = latestVersion('docker', 'rhel7next*')
	    next_cselinux = latestVersion('container-selinux', 'rhel7next*')
	    echo "rhel7next: docker-${next_docker} container-selinux-${next_cselinux}"
	    test_docker = latestVersion('docker', 'dockertested')
	    test_cselinux = latestVersion('container-selinux', 'dockertested')
	    echo "dockertested: docker-${test_docker} container-selinux-${test_cselinux}"
	    if ( next_docker == test_docker && next_cselinux == test_cselinux ) {
	        echo 'No new packages. Aborting build.'
	        currentBuild.result = 'SUCCESS'
	    }
	}
	if ( currentBuild.result == 'SUCCESS' ) {
	    return
	}
	venv_dir = "${env.WORKSPACE}/origin-ci-tool"
	stage ('Create a virtualenv for the origin-ci-tool') {
		if ( CLEAN_INSTALL.toBoolean() ) {
			sh "rm -rf ${venv_dir}"
			sh "rm -rf ${env.WORKSPACE}/.config"
			sh "virtualenv ${venv_dir} --system-site-packages"
		}
		sh "test -d ${venv_dir}"
	}
	withEnv([
		"VIRTUAL_ENV=${venv_dir}",
		"PATH=${venv_dir}/bin:${env.PATH}",
		"PYTHON_HOME=",
		"OCT_CONFIG_HOME=${env.WORKSPACE}/.config",
		"ANSIBLE_SSH_CONTROL_PATH_DIR=${env.HOME}/.ansible/cp",
		"ANSIBLE_SSH_CONTROL_PATH=%(directory)s/%%h-%%p-%%r"
	]) {
		stage ('Install dependencies in the virtualenv') {
			sh "pip install --ignore-installed --upgrade pip"
			sh 'pip install --ignore-installed boto boto3'
		}
		stage ('Install the origin-ci-tool') {
			sh 'pip install git+https://github.com/openshift/origin-ci-tool.git --process-dependency-links'
		}
		stage ('Configure the origin-ci-tool') {
			sh 'oct configure ansible-client verbosity 5'
			sh 'oct configure aws-client keypair_name libra'
			sh "oct configure aws-client private_key_path /home/jenkins/.ssh/devenv.pem"
		}
		try {
			stage ('Provision the remote host') {
				sh "oct provision remote all-in-one --os rhel --stage bare --provider aws --name package-dockertest-${env.BUILD_NUMBER} --discrete-ssh-config"
				ssh_config = "${env.OCT_CONFIG_HOME}/origin-ci-tool/inventory/.ssh_config"
			}
			stage ('Install distribution dependencies') {
				sh 'oct prepare dependencies'
			}
			stage ('Install Golang') {
				sh 'oct prepare golang --version 1.7.5 --repourl https://cbs.centos.org/repos/paas7-openshift-origin36-candidate/x86_64/os/'
			}
			stage ('Install Docker') {
				sh 'oct prepare docker --repo "rhel7next*"'
				docker_rpm = installedNVR('docker')
				container_selinux_rpm = installedNVR('container-selinux')
				echo "Installed: ${docker_rpm} ${container_selinux_rpm}"
			}
			stage ('Prepare source repositories') {
				sh 'oct prepare repositories'
			}
			stage ('Build an Origin release') {
				sh """{
cat <<EOF
set -o errexit -o nounset -o pipefail -o xtrace
cd /data/src/github.com/openshift/origin
hack/build-base-images.sh
OS_BUILD_ENV_PRESERVE=_output/local hack/env OS_ONLY_BUILD_PLATFORMS='linux/amd64' hack/build-rpm-release.sh
sudo systemctl restart docker
hack/build-images.sh
sed -i 's|go/src|data/src|' _output/local/releases/rpms/origin-local-release.repo
sudo cp _output/local/releases/rpms/origin-local-release.repo /etc/yum.repos.d/
EOF
} | ssh -F ${ssh_config} openshiftdevel"""
			}
			stage ('Build an OpenShift Ansible release') {
				sh """{
cat <<EOF
set -o errexit -o nounset -o pipefail -o xtrace
cd /data/src/github.com/openshift/openshift-ansible
tito_tmp_dir="tito"
mkdir -p "\${tito_tmp_dir}"
tito tag --offline --accept-auto-changelog
tito build --output="\${tito_tmp_dir}" --rpm --test --offline --quiet
createrepo "\${tito_tmp_dir}/noarch"
cat << EOR > ./openshift-ansible-local-release.repo
[openshift-ansible-local-release]
baseurl = file://\$( pwd )/\${tito_tmp_dir}/noarch
gpgcheck = 0
name = OpenShift Ansible Release from Local Source
EOR
sudo cp ./openshift-ansible-local-release.repo /etc/yum.repos.d
EOF
} | ssh -F ${ssh_config} openshiftdevel"""
			}
			stage ('Install the OpenShift Ansible release') {
				sh """{
cat <<EOF
set -o errexit -o nounset -o pipefail -o xtrace
cd /data/src/github.com/openshift/openshift-ansible
last_tag="\$( git describe --tags --abbrev=0 --exact-match HEAD )"
last_commit="\$( git log -n 1 --pretty=%h )"
sudo yum install -y "atomic-openshift-utils\${last_tag/openshift-ansible/}.git.0.\${last_commit}.el7"
EOF
} | ssh -F ${ssh_config} openshiftdevel"""
			}
			stage ('Install the Ansible plugins') {
				sh """{
cat <<EOF
set -o errexit -o nounset -o pipefail -o xtrace
sudo yum install -y python-pip
sudo pip install junit_xml
sudo chmod o+rw /etc/environment
echo "ANSIBLE_JUNIT_DIR=\$( pwd )/_output/scripts/ansible_junit" >> /etc/environment
sudo mkdir -p /usr/share/ansible/plugins/callback
for plugin in 'default_with_output_lists' 'generate_junit'; do
   wget "https://raw.githubusercontent.com/openshift/origin-ci-tool/master/oct/ansible/oct/callback_plugins/\${plugin}.py"
   sudo mv "\${plugin}.py" /usr/share/ansible/plugins/callback
done
sudo sed -r -i -e 's/^#?stdout_callback.*/stdout_callback = default_with_output_lists/' -e 's/^#?callback_whitelist.*/callback_whitelist = generate_junit/' /etc/ansible/ansible.cfg
EOF
} | ssh -F ${ssh_config} openshiftdevel"""
			}
			stage ('determine the release commit for origin images and version for rpms') {
				sh """{
cat <<EOF
set -o errexit -o nounset -o pipefail -o xtrace
cd /data/src/github.com/openshift/origin
jobs_repo="/data/src/github.com/openshift/aos-cd-jobs/"
git log -1 --pretty=%h >> "\${jobs_repo}/ORIGIN_COMMIT"
( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "-\${OS_RPM_VERSION}-\${OS_RPM_RELEASE}" ) >> "\${jobs_repo}/ORIGIN_PKG_VERSION"
EOF
} | ssh -F ${ssh_config} openshiftdevel"""
			}
			stage ('determine the release commit for origin images and version for rpms') {
				sh """{
cat <<EOF
set -o errexit -o nounset -o pipefail -o xtrace
cd /data/src/github.com/openshift/aos-cd-jobs
ansible-playbook -vv --become               \
                 --become-user root         \
                 --connection local         \
                 --inventory sjb/inventory/ \
                 -e deployment_type=origin  \
                 /usr/share/ansible/openshift-ansible/playbooks/byo/openshift-node/network_manager.yml
ansible-playbook -vv --become               \
                 --become-user root         \
                 --connection local         \
                 --inventory sjb/inventory/ \
                 -e deployment_type=origin  \
                 -e openshift_pkg_version="\$( cat ./ORIGIN_PKG_VERSION )"                \
                 -e oreg_url='openshift/origin-\${component}:'"\$( cat ./ORIGIN_COMMIT )" \
                 /usr/share/ansible/openshift-ansible/playbooks/byo/config.yml
sudo chmod a+x /etc/ /etc/origin/ /etc/origin/master/
sudo chmod a+rw /etc/origin/master/admin.kubeconfig
EOF
} | ssh -F ${ssh_config} openshiftdevel"""
			}
			stage ('Run the extended conformance suite') {
				sh """{
cat <<EOF
set -o errexit -o nounset -o pipefail -o xtrace
cd /data/src/github.com/openshift/origin
KUBECONFIG=/etc/origin/master/admin.kubeconfig TEST_ONLY='true' JUNIT_REPORT='true' make test-extended SUITE=conformance
EOF
} | ssh -F ${ssh_config} openshiftdevel"""
			}
		} catch (Exception err) {
			currentBuild.result = 'FAILURE'
		} finally {
			stage ('Deprovision the remote host') {
				sh 'oct deprovision'
			}
			if ( currentBuild.result != 'FAILURE' ) {
				stage ('Update the state of the dockertested repo') {
					sh 'kinit -k -t /home/jenkins/ocp-build.keytab ocp-build/atomic-e2e-jenkins.rhev-ci-vms.eng.rdu2.redhat.com@REDHAT.COM'
					sh "ssh ocp-build@rcm-guest.app.eng.bos.redhat.com /mnt/rcm-guest/puddles/RHAOS/scripts/update-dockertested-repo.sh ${docker_rpm} ${container_selinux_rpm}"
				}
				stage ('Send out an e-mail about new versions') {
					mail (
						to: 'aos-devel@redhat.com',
						cc: 'skuznets@redhat.com',
						subject: "${docker_rpm} and ${container_selinux_rpm} pushed to dockertested repository",
						body: """The latest job[1] marked the following RPMs as successful:
${docker_rpm}
${container_selinux_rpm}

These RPMs have been pushed to the dockertested[2] repository.

[1] ${env.JOB_URL}${env.BUILD_NUMBER}
[2] https://mirror.openshift.com/enterprise/rhel/dockertested/x86_64/os/"""
					)
				}
			}
		}
	}
}
