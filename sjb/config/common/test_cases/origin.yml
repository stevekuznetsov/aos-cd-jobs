---
parameters:
- name: JOB_SPEC
  description: "JSON form of job specification."
- name: buildId
  description: "Unique build number for each run."
- name: REPO_OWNER
  description: "GitHub org that triggered the job."
  default_value: openshift
- name: REPO_NAME
  description: "GitHub repo that triggered the job."
  default_value: origin
- name: PULL_BASE_REF
  description: "Ref name of the base branch."
- name: PULL_BASE_SHA
  description: "Git SHA of the base branch."
- name: PULL_REFS
  description: "All refs to test."
- name: PULL_NUMBER
  description: "Pull request number."
- name: PULL_PULL_SHA
  description: "Pull request head SHA."
- name: JOB_SPEC
  description: "The job spec definition."
provision:
  os: "rhel"
  stage: "base"
  provider: "aws"
sync_repos:
  - name: "origin"
  - name: "image-registry"
  - name: "kubernetes-metrics-server"
actions:
  - type: "forward_parameters"
    parameters:
      - REPO_OWNER
      - REPO_NAME
      - PULL_BASE_REF
      - PULL_BASE_SHA
      - PULL_REFS
      - PULL_NUMBER
      - PULL_PULL_SHA
      - JOB_NAME
      - JOB_SPEC
  - type: "script"
    title: "record the starting metadata"
    timeout: 300
    repository: "aos-cd-jobs"
    script: |-
      trap 'exit 0' EXIT
      sjb/gcs/started.py
  - type: "host_script"
    title: "upload GCS starting metadata"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      mkdir -p gcs/
      scp -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel:/data/started.json gcs/

      function gcs_path() {
        bucket="gs://origin-ci-test/"

        if [[ -z "${buildId:-}" ]]; then
          echo "Not a Prow job!" 1>&2
          return 1
        fi
        suffix="${JOB_NAME}/${BUILD_NUMBER}/"
        if [[ -n "${REPO_OWNER:-}" ]]; then
          if [[ "${REPO_NAME}" != "origin" ]]; then
            segment="${REPO_OWNER}_${REPO_NAME}/"
          fi
          if [[ -n "${PULL_NUMBER:-}" ]]; then
            # this is a presubmit
            prefix="pr-logs/pull/"
            segment="${segment:-}${PULL_NUMBER}/"
          else
            if [[ "${PULL_REFS}" =~ ^[^:]+:[^:]+(,[^:]+:[^:]+){2,} ]]; then
              # this is a batch
              prefix="pr-logs/pull/batch/"
            else
              # this is a postsubmit
              prefix="logs/"
            fi
          fi
        else
          # this is a periodic
          prefix="logs/"
        fi
        echo "${bucket}${prefix}${segment:-}${suffix}"
        return 0
      }
      if path="$( gcs_path )"; then
        gsutil cp gcs/started.json "${path}started.json"
        if [[ -n "${PULL_NUMBER:-}" ]]; then
          echo "${path%\/}" > "${BUILD_NUMBER}.txt"
          gsutil cp "${BUILD_NUMBER}.txt" "gs://origin-ci-test/pr-logs/directory/${JOB_NAME}/${BUILD_NUMBER}.txt"
        fi
      fi
  - type: "script"
    title: "use a ramdisk for etcd"
    timeout: 300
    script: |-
      sudo su root <<SUDO
      mkdir -p /tmp
      mount -t tmpfs -o size=4096m tmpfs /tmp
      mkdir -p /tmp/etcd
      chmod a+rwx /tmp/etcd
      restorecon -R /tmp
      echo "ETCD_DATA_DIR=/tmp/etcd" >> /etc/environment
      SUDO
  - type: "script"
    title: "turn off unnecessary CentOS PaaS SIG repos"
    timeout: 300
    script: |-
      sudo yum-config-manager --disable centos-paas-sig-openshift-origin\*-rpms

      if [[ "${JOB_NAME}" == *update* ]]; then
        branch="${PULL_BASE_REF:-"master"}"
        case "${branch}" in
          master )
            sudo yum-config-manager --enable centos-paas-sig-openshift-origin37-rpms
            ;;
          release-* )
            major="$( echo "${branch}" | grep -Po "(?<=release-)[0-9](?=\.[0-9])" )"
            minor="$( echo "${branch}" | grep -Po "(?<=release-[0-9]\.)[0-9]" )"
            previous="$(( minor - 1 ))"
            repo="centos-paas-sig-openshift-origin${major}${previous}-rpms"
            sudo yum-config-manager --enable "${repo}"
            ;;
          enterprise-* )
            major="$( echo "${branch}" | grep -Po "(?<=release-)[0-9](?=\.[0-9])" )"
            minor="$( echo "${branch}" | grep -Po "(?<=release-[0-9]\.)[0-9]" )"
            previous="$(( minor - 1 ))"
            repo="centos-paas-sig-openshift-origin${major}${previous}-rpms"
            sudo yum-config-manager --enable "${repo}"
            ;;
        esac
      fi
  - type: "script"
    title: "enable docker tested repo"
    timeout: 300
    script: |-
      sudo touch /etc/yum.repos.d/dockertested.repo
      sudo chmod a+rw /etc/yum.repos.d/dockertested.repo
      cat <<REPO >/etc/yum.repos.d/dockertested.repo
      [dockertested]
      name=dockertested
      baseurl=https://mirror.openshift.com/enterprise/rhel/dockertested/x86_64/os/
      enabled=1
      sslclientcert=/var/lib/yum/client-cert.pem
      sslclientkey=/var/lib/yum/client-key.pem
      sslverify=0
      REPO
post_actions:
  - type: "forward_parameters"
    parameters:
      - BUILD_URL
  - type: "script"
    title: "record the ending metadata"
    timeout: 300
    repository: "aos-cd-jobs"
    script: |-
      trap 'exit 0' EXIT
      sjb/gcs/finished.py
  - type: "host_script"
    title: "assemble GCS output"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      mkdir -p gcs/artifacts gcs/artifacts/generated gcs/artifacts/journals gcs/artifacts/gathered
      scp -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel:/data/finished.json gcs/
      cat "/var/lib/jenkins/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log" > gcs/build-log.txt
      cp artifacts/generated/* gcs/artifacts/generated/
      cp artifacts/journals/* gcs/artifacts/journals/
      cp -r artifacts/gathered/* gcs/artifacts/

      function gcs_path() {
        bucket="gs://origin-ci-test/"

        if [[ -z "${buildId}" ]]; then
          echo "Not a Prow job!" 1>&2
          return 1
        fi
        suffix="${JOB_NAME}/${BUILD_NUMBER}/"
        if [[ -n "${REPO_OWNER:-}" ]]; then
          if [[ "${REPO_NAME:-}" != "origin" ]]; then
            segment="${REPO_OWNER}_${REPO_NAME}/"
          fi
          if [[ -n "${PULL_NUMBER:-}" ]]; then
            # this is a presubmit
            prefix="pr-logs/pull/"
            segment="${segment:-}${PULL_NUMBER}/"
          else
            if [[ "${PULL_REFS}" =~ ^[^:]+:[^:]+(,[^:]+:[^:]+){2,} ]]; then
              # this is a batch
              prefix="pr-logs/pull/batch/"
            else
              # this is a postsubmit
              prefix="logs/"
            fi
          fi
        else
          # this is a periodic
          prefix="logs/"
        fi
        echo "${bucket}${prefix}${segment:-}${suffix}"
        return 0
      }
      if path="$( gcs_path )"; then
        gsutil -m cp -r gcs/* "${path}"
      fi
artifacts:
  - "/data/src/github.com/openshift/origin/_output/scripts"
generated_artifacts:
  installed_packages.log: 'sudo yum list installed'
  avc_denials.log: 'sudo ausearch -m AVC -m SELINUX_ERR -m USER_AVC'
  docker.info: 'sudo docker version && sudo docker info && sudo docker images && sudo docker ps -a'
  docker.config: 'sudo cat /etc/sysconfig/docker /etc/sysconfig/docker-network /etc/sysconfig/docker-storage /etc/sysconfig/docker-storage-setup /etc/systemd/system/docker.service'
  filesystem.info: 'sudo df -T -h && sudo pvs && sudo vgs && sudo lvs'
  pid1.journal: 'sudo journalctl _PID=1 --no-pager --all --lines=all'
  master-metrics.log: 'oc get --raw /metrics --config=/etc/origin/master/admin.kubeconfig'
  node-metrics.log: 'oc get --raw /metrics --server=https://\$( uname --nodename ):10250 --config=/etc/origin/master/admin.kubeconfig'
system_journals:
  - docker.service
  - dnsmasq.service
  - systemd-journald.service
